#!/usr/bin/env ruby
#ALCES_META
# Include metadata in propagate itself so can propagate files from one host to
# another that is not directly accessible.
#path=/usr/local/bin/propagate
#ALCES_META_END


# This is a script to help when developing Flight Compute projects locally and
# then testing on remote systems. To use:
#
# - Link this script on to your path:
# ```
# CLUSTERWARE=/path/to/clusterware
# sudo ln -s $CLUSTERWARE/scripts/development/propagate /usr/local/bin
# ```
#
# - Add a metadata section to all file(s) you are working with:
# ```
# #ALCES_META
# # Refer to `clusterware/scripts/development/propagate`.
# #path=/opt/clusterware/var/lib/triggers/monitor/triggers/add
# #ALCES_META_END
# ```
# where `path` specifies the installed location of the file on some system.
# Note: this section can be anywhere in the file but I suggest near to the
# start to make it obvious; the 'Refer...' part is not required but suggested
# to indicate the purpose of this section.
#
# - Run the script:
# ```
# propagate 52.214.115.237 monitor/ foo
# ```
# where the IP is an SSH-able IP of the remote system, and the remaining
# arguments are the names of files, or directories containing files, to be
# propagated to the remote system.
#
# - SSH into the remote system yourself and run any commands you want using the
# new files; you can easily be sure you have all the updated files in the
# correct places (provided you added the correct metadata to the correct
# files), without needing to commit things/ build AMIs/ launch new instances
# etc.


# Possible useful extensions:
# - Allow propagating to multiple systems at once - could specify in metadata
# system file is for, and then specify IP of this elsewhere such as in an
# environment variable.
#
# - Allow propagating to multiple of same type of system, e.g. all nodes of a
# cluster simultaneously.
#
# - Identify metadata when using comment markers other that '#'.
#
# - Could make propagating files run in parallel to make execution quicker.


START_MARKER = '^#ALCES_META$'
END_MARKER = '^#ALCES_META_END$'

REMOTE_USER = 'alces'

REMOTE_PATH_KEY = :path


def main
  remote_ip, files = parse_args
  check_can_ssh(remote_ip)

  files_metadata = process_files(files)
  processed_files_metadata = process_files_metadata(files_metadata)
  processed_files_metadata.each do |file, metadata|
    propagate_file(file, metadata, remote_ip)
  end
end


def parse_args
  unless ARGV.length >= 2
    print_usage_and_exit
  end

  remote_ip = ARGV[0]
  files = ARGV.drop(1)

  [remote_ip, files]
end


def print_usage_and_exit
  puts "Usage: propagate <remote_ip> <files>[...]"
  exit 1
end


def check_can_ssh(remote_ip)
  puts "\nChecking can access '#{remote_ip}'"
  log_command "ssh #{ssh_arg(remote_ip)} echo 'can access'"
  unless $?.exitstatus == 0
    puts "Cannot access '#{remote_ip}'"
    exit 1
  end
end


def process_files(files)
  files_metadata = {}
  STDERR.puts

  files.map do |file|
    if !File.exists?(file)
      STDERR.puts "File does not exist: '#{file}'"
      [] # Will be flattened out.
    elsif File.directory?(file)
      # Get all files within any passed directory args.
      Dir["#{file}/**/*"]
    else
      file
    end
  end
  .flatten
  .reject {|f| File.directory? f}
  .each do |file|
    begin
      metadata = extract_file_metadata(file)
      files_metadata[file] = metadata
    rescue => ex
      STDERR.puts "Skipping '#{file}' due to (possibly expected) exception '#{ex}'"
    end
  end
  STDERR.puts

  files_metadata
end


def extract_file_metadata(file)
  metadata_match = File.read(file)
    .match(/#{START_MARKER}(.+?)#{END_MARKER}/m)

  if metadata_match
    metadata_match[1]
  else
    STDERR.puts "No metadata found for file: '#{file}'"
  end
end


def process_files_metadata(files_metadata)
  files_metadata
    .reject {|file, metadata| metadata.nil?}
    .map {|file, metadata| [file, process_file_metadata(metadata)]}
    .to_h
end


def process_file_metadata(file_metadata)
  file_metadata
    .gsub(/^#/, '') # Strip comment marker.
    .split("\n")
    .reject {|line| !line.include?('=')} # Ignore lines which are not `key=value`.
    .map {|line| line.split('=')}
    .map {|k, v| [k.strip.to_sym, v.strip]}
    .to_h
end


def ssh_arg(remote_ip)
  "#{REMOTE_USER}@#{remote_ip}"
end


def propagate_file(file, metadata, remote_ip)
  puts "\nPropagating file: '#{file}'"

  ssh_arg = ssh_arg(remote_ip)
  remote_path = metadata[REMOTE_PATH_KEY].strip
  raise "No '#{REMOTE_PATH_KEY}' given" unless remote_path
  local_permissions = `stat -c "%a" "#{file}"`.strip

  # We copy the file to a remote temp file then move it in to place with
  # `sudo`, as we cannot SSH in as `root` but can `sudo` once there, and we may
  # not have write permissions to the remote directory otherwise.
  remote_temp_file = (log_command "ssh #{ssh_arg} mktemp").strip
  log_command "scp #{file} #{ssh_arg}:#{remote_temp_file}"
  log_command "ssh #{ssh_arg} sudo mkdir -p $(dirname #{remote_path})"
  log_command "ssh #{ssh_arg} sudo mv #{remote_temp_file} #{remote_path}"
  log_command "ssh #{ssh_arg} sudo chmod #{local_permissions} #{remote_path}"

rescue => ex
  "Exception while propagating '#{file}': '#{ex}'"
ensure
  # Got to ensure we puts.
  puts
end


def log_command(command)
  puts "`#{command.strip}`"
  `#{command}`.tap do |stdout|
    output = stdout.strip
    puts output.gsub(/^/, '>> ') unless output.empty?
  end
end


main
