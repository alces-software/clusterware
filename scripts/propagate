#!/bin/bash
#==============================================================================
# Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
if (( UID != 0 )); then
  echo "$0: must run as root"
  exit 1
fi

if [ -z "$1" ]; then
    echo "Usage: $0 <IP address or hostname of this system>"
    exit 1
fi

APP_MANAGER_ADDRESS="$1"

GIT=$(type -P git)
GIT=${GIT:-$(type -P /opt/clusterware/opt/git/bin/git)}
if [ -z "$GIT" ]; then
  echo "$0: could not find a working git installation; please install git!"
  exit 1
fi

src_dir="${alces_SOURCE_DIR:-$(mktemp -d /tmp/clusterware.XXXXXXXX)}"

if [ ! -f "${src_dir}"/scripts/control.vars.sh ]; then
    if [ "$(ls -A "${src_dir}" 2>/dev/null)" ]; then
	echo "An incomplete source directory already exists, please remove or specify a different location: ${src_dir}"
	exit 1
    fi
    cleanup=true
    src_url_base="${alces_SOURCE_URL:-https://raw.githubusercontent.com/alces-software/clusterware}/${alces_SOURCE_BRANCH:-master}/scripts"
    mkdir -p "${src_dir}"/scripts/lib
    for a in bootstrap control.vars.sh lib/ui.functions.sh lib/fetch.functions.sh; do
	curl -# -L "${src_url_base}"/${a} > "${src_dir}"/scripts/$a
    done
    source "${src_dir}"/scripts/control.vars.sh
    mkdir -p "${src_dir}"/scripts/dependencies
    for a in $deps; do
	curl -# -L "${src_url_base}"/dependencies/${a}.sh > "${src_dir}"/scripts/dependencies/$a.sh
    done
else
    source "${src_dir}"/scripts/control.vars.sh
fi

source "${src_dir}"/scripts/lib/ui.functions.sh
source "${src_dir}"/scripts/lib/fetch.functions.sh

cw_src_url_base="https://github.com/alces-software/clusterware/archive"
cw_src_url_file="${alces_SOURCE_BRANCH:-master}.tar.gz"
cw_src_url="${cw_src_url_base}/${cw_src_url_file}"
fetch_handling=bin
prop_dir="${target}/var/lib/clusterware"

title "Fetching Clusterware source"
mkdir -p "${prop_dir}"
curl -# -L "${cw_src_url}" > "${prop_dir}/clusterware.tar.gz"
if [ $? -gt 0 ]; then
    echo "Unable to retrieve clusterware source, aborting."
    exit 1
fi

for os in $dists; do
    dep_src="${prop_dir}/dist/${os}"
    if [ -d "${dep_src}" ]; then
	rm -rf "${dep_src}"
    fi
done

for os in $dists; do
    title "Fetching Clusterware dependencies for distribution: $os"
    dep_src="${prop_dir}/dist/${os}"
    mkdir -p "${dep_src}"
    for dep in ${deps}; do
        source "${src_dir}/scripts/dependencies/${dep}.sh"
        fetch_${dep}
    done
done

for os in $dists; do
    title "Fetching Serviceware for distribution: $os"
    dep_src="${prop_dir}/dist/${os}"
    mkdir -p "${dep_src}"
    for svc in ${serviceware}; do
        fetch_dist "${svc}"
    done
done

title "Preparing public repository contents"
if [ -d "${src_dir}/tmp/repos" ]; then
    rm -rf "${src_dir}/tmp/repos"
fi
mkdir -p "${src_dir}/tmp/repos"
doing "Handlers"
$GIT clone https://github.com/alces-software/clusterware-handlers.git "${src_dir}"/tmp/repos/clusterware-handlers &>/dev/null
tar --warning=no-file-changed -C "${src_dir}"/tmp/repos/clusterware-handlers -czf "${prop_dir}/clusterware-handlers.tar.gz" . || true
say_done $?
doing "Gridware"
$GIT clone https://github.com/alces-software/packager-base.git "${src_dir}"/tmp/repos/packager-base &>/dev/null
tar --warning=no-file-changed -C "${src_dir}"/tmp/repos/packager-base -czf "${prop_dir}/packager-base.tar.gz" . || true
say_done $?
doing "Sessions"
$GIT clone https://github.com/alces-software/clusterware-sessions.git "${src_dir}"/tmp/repos/clusterware-sessions &>/dev/null
tar --warning=no-file-changed -C "${src_dir}"/tmp/repos/clusterware-sessions -czf "${prop_dir}/clusterware-sessions.tar.gz" . || true
say_done $?
doing "Services"
$GIT clone https://github.com/alces-software/clusterware-services.git "${src_dir}"/tmp/repos/clusterware-services &>/dev/null
tar --warning=no-file-changed -C "${src_dir}"/tmp/repos/clusterware-services -czf "${prop_dir}/clusterware-services.tar.gz" . || true
say_done $?
doing "Storage"
$GIT clone https://github.com/alces-software/clusterware-storage.git "${src_dir}"/tmp/repos/clusterware-storage &>/dev/null
tar --warning=no-file-changed -C "${src_dir}"/tmp/repos/clusterware-storage -czf "${prop_dir}/clusterware-storage.tar.gz" . || true
say_done $?

title "Preparing bootstrap script"
doing "Install"
cp "${src_dir}"/scripts/bootstrap "${prop_dir}"
say_done $?

doing "Configure"
# update the bootstrap script
sed -i -e "s,#export alces_SOURCE_URL.*,export alces_SOURCE_URL=\"\${alces_SOURCE_URL:-http://${APP_MANAGER_ADDRESS}/clusterware/clusterware.tar.gz}\",g" "${prop_dir}"/bootstrap
sed -i -e "s,#export alces_DIST_URL.*,export alces_DIST_URL=\"\${alces_DIST_URL:-http://${APP_MANAGER_ADDRESS}/clusterware/dist}\",g" "${prop_dir}"/bootstrap
sed -i -e "s,#export alces_REPOS_URL.*,export alces_REPOS_URL=\"\${alces_REPOS_URL:-http://${APP_MANAGER_ADDRESS}/clusterware}\",g" "${prop_dir}"/bootstrap
say_done $?

title "Cleaning up"
if [ "$cleanup" = "true" ]; then
    doing "Clean"
    rm -rf "${src_dir}"
    say_done $?
else
    doing "Skip"
    say_done $?
fi
