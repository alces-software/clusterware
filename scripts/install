#!/bin/bash
#==============================================================================
# Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
source=$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)
source $source/scripts/control.vars.sh
source $source/scripts/lib/ui.functions.sh
source $source/scripts/lib/fetch.functions.sh
source $source/scripts/lib/install.functions.sh

if [ -z "$2" ]; then
  echo "$0: invalid parameters"
  cat <<EOF
Usage: $0 <OS> <source|bin>

OS must be one of the systems supported by clusterware: 'el6', 'el7'

Supply 'source' or 'bin' to select whether to build dependencies from
source or to download prebuilt distributions of the dependencies.
EOF
  exit 1
else
  os="$1"
  fetch_handling="$2"
fi

cat <<EOF
[33m===============================================================================
 STARTING INSTALLATION
===============================================================================[0m
EOF

source "${source}/scripts/os/${os}.sh"

alces_BUILD_TMP="${alces_BUILD_TMP:-tmp}"
mkdir -p ${source}/${alces_BUILD_TMP}/log ${source}/${alces_BUILD_TMP}/src ${source}/${alces_BUILD_TMP}/build
dep_logs="${source}/${alces_BUILD_TMP}/log"
dep_build="${source}/${alces_BUILD_TMP}/build"
dep_src="${source}/${alces_BUILD_TMP}/src"

# Install pre-requisites
title "Installing prerequisites"
doing 'Base'
install_base_prerequisites &> "${dep_logs}/base-prereqs.log"
say_done $?
if fetch_handling_is_source; then
    doing 'Build'
    install_build_prerequisites &> "${dep_logs}/build-prereqs.log"
    say_done $?
fi
doing 'Runtime'
install_runtime_prerequisites &> "${dep_logs}/runtime-prereqs.log"
say_done $?

if [ -L "${gridware_root}"/local ]; then
    gridware_target="$(readlink "${gridware_root}"/local)"
else
    gridware_target="${gridware_root}/depots/$(uuid -v4 | cut -f1 -d'-')"
fi

title "Creating clusterware directory structure"
doing 'Create'
[[ -d "${target}" ]] || mkdir -p "${target}"
cp -R "${source}/bin" "${source}/lib" "${source}/libexec" "${target}"
if [ ! -d "${target}/etc" ]; then
    cp -R "${source}/etc" "${target}"
    sed -e "s/_OS_/${os}/g" \
        -e "s,_GRIDWARE-ROOT_,${gridware_root},g" \
        -e "s,_GRIDWARE_,${gridware_target},g" \
        -i "${target}/etc/packager.yml" "${target}/etc"/distro.*
    sed -e "s,_ROOT_,${target},g" \
        -e "s,_GRIDWARE-ROOT_,${gridware_root},g" \
        -i "${target}/etc/modulespath" "${target}/etc/ruby.rc"
    if [ "$alces_DIST_URL" ]; then
        sed -e "s,^cw_DIST_URL=.*,cw_DIST_URL=${alces_DIST_URL}/,g" -i "${target}/etc"/serviceware.rc
    fi
    rm -f "${target}"/etc/handlers/.gitkeep
    rm -f "${target}"/etc/session/.gitkeep
    rm -f "${target}"/etc/services/.gitkeep
    rm -f "${target}"/etc/storage/.gitkeep
fi
mkdir -p /var/log/clusterware
say_done $?

title "Installing Clusterware base configuration"
doing 'Install'
mkdir -p /etc/xdg/clusterware
cat <<EOF > /etc/xdg/clusterware/config.vars.sh
cw_ROOT="${target}"
kernel_load() { source "${target}/lib/clusterware.kernel.sh"; }
EOF
cat <<EOF > /etc/xdg/clusterware/config.vars.csh
set cw_ROOT="${target}"
EOF
say_done $?

title "Creating gridware directory structure"
doing 'Create'
mkdir -p /var/cache/gridware/{archives,archives/depots,src} /var/log/gridware \
  ${gridware_target}/${os}/etc ${gridware_root}/etc
ln -snf "${gridware_target}" "${gridware_root}/local"
say_done $?

for dep in ${deps}; do
    source "${source}/scripts/dependencies/${dep}.sh"
    if ! detect_${dep}; then
        fetch_${dep}
    fi
done

for dep in ${deps}; do
    if ! detect_${dep}; then
        install_${dep}
    fi
done

title "Configuring gridware group"
if /usr/bin/getent group gridware >/dev/null; then
    doing 'Detect'
else
    doing 'Configure'
    /usr/bin/getent group gridware >/dev/null || /usr/sbin/groupadd -g 341 gridware
fi
say_done $?

title "Setting up gridware package structure for '${os}'"
if [ -d "${gridware_target}/${os}/pkg" ]; then
    doing 'Detect'
else
    doing "Configure"
    mkdir -p "${gridware_target}/${os}/pkg" "${gridware_target}/${os}/etc/modules"
    cp -R "${source}/dist/modules"/* "${gridware_target}"/${os}/etc/modules
    "$alces_RUBY" "${source}/scripts/init-gridware.rb"
fi
say_done $?

title "Setting up gridware base repository"
if [ -d "${gridware_root}/etc/repos" ]; then
    doing 'Detect'
else
    doing 'Configure'
    cp -R "${source}/dist/repos" "${gridware_root}/etc"
    say_done $?
    doing 'Initialize'
    if [ "$alces_REPOS_URL" ]; then
        mkdir -p "${gridware_root}"/etc/repos/base/pkg
        tar -C "${gridware_root}"/etc/repos/base/pkg -xvzf "${source}"/packager-base.tar.gz &> "${dep_logs}/gridware-init.log"
    else
        "${target}/bin/alces" gridware update base &> "${dep_logs}/gridware-init.log"
    fi
    chmod -R g+rw "${gridware_root}"/etc
    find "${gridware_root}"/etc -type d -exec chmod 2775 {} \;
    chgrp -R gridware "${gridware_root}"/etc
    chgrp gridware "${gridware_root}" "${gridware_root}"/depots
    chmod g+rws "${gridware_root}" "${gridware_root}"/depots
fi
say_done $?

title "Updating gridware permissions"
doing 'Configure'
access_targets=(/var/cache/gridware /var/log/gridware)
chmod -R g+rw "${access_targets[@]}"
find "${access_targets[@]}" -type d -exec chmod 2775 {} \;
chgrp -R gridware "${access_targets[@]}"
chmod -R g+rw "${gridware_target}"
find "${gridware_target}" -type d -exec chmod 2775 {} \;
chgrp -R gridware "${gridware_target}"
say_done $?

title "Setting up handler base repository"
if [ -d "${target}/var/lib/handler/repos" ]; then
    doing 'Detect'
else
    doing 'Initialize'
    if [ "$alces_REPOS_URL" ]; then
        mkdir -p "${target}"/var/lib/handler/repos/base
        tar -C "${target}"/var/lib/handler/repos/base -xvzf "${source}"/clusterware-handlers.tar.gz &> "${dep_logs}/handler-init.log"
    else
        "${target}/bin/alces" handler update &>> "${dep_logs}/handler-init.log"
    fi
fi
say_done $?

title "Setting up session base repository"
if [ -d "${target}/var/lib/sessions/repos" ]; then
    doing 'Detect'
else
    doing 'Initialize'
    if [ "$alces_REPOS_URL" ]; then
        mkdir -p "${target}"/var/lib/sessions/repos/base
        tar -C "${target}"/var/lib/sessions/repos/base -xvzf "${source}"/clusterware-sessions.tar.gz &> "${dep_logs}/session-init.log"
    else
        "${target}/bin/alces" session update &> "${dep_logs}/session-init.log"
    fi
    "${target}/bin/alces" session enable default &>> "${dep_logs}/session-init.log"
fi
say_done $?

title "Setting up services base repository"
if [ -d "${target}/var/lib/services/repos" ]; then
    doing 'Detect'
else
    doing 'Initialize'
    if [ "$alces_REPOS_URL" ]; then
        mkdir -p "${target}"/var/lib/services/repos/base
        tar -C "${target}"/var/lib/services/repos/base -xvzf "${source}"/clusterware-services.tar.gz &> "${dep_logs}/services-init.log"
    else
        "${target}/bin/alces" service update &> "${dep_logs}/services-init.log"
    fi
fi
say_done $?

title "Setting up storage backend base repository"
if [ -d "${target}/var/lib/storage/repos" ]; then
    doing 'Detect'
else
    doing 'Initialize'
    if [ "$alces_REPOS_URL" ]; then
        mkdir -p "${target}"/var/lib/storage/repos/base
        tar -C "${target}"/var/lib/storage/repos/base -xvzf "${source}"/clusterware-storage.tar.gz &> "${dep_logs}/services-init.log"
    else
        "${target}/bin/alces" storage update &> "${dep_logs}/storage-init.log"
    fi
fi
say_done $?

title "Setting up documents area"
if [ -d "${target}/var/lib/docs" ]; then
    doing 'Detect'
else
    doing "Initialize"
    mkdir -p "${target}/var/lib/docs/guides" "${target}/var/lib/docs/templates"
    cp "${source}/dist/guides"/* "${target}/var/lib/docs/guides"
fi
say_done $?

title "Installing profile hooks"
doing 'Install'
cp "${source}/dist/profile"/* /etc/profile.d
say_done $?

title "Installing logrotate hooks"
doing 'Install'
cp "${source}/dist/logrotate/clusterware" /etc/logrotate.d
say_done $?

title "Installing startup scripts"
doing 'Install'
install_startup_hooks &> "${dep_logs}/install-startup-hooks.log"
say_done $?

if [ "$(type -t lsof)" ]; then
    ppid=`ps -p $$ -o ppid=`
    user_shell=`lsof -p $ppid | awk '(NR==2) {print $1}'`
fi

case $user_shell in
    sh|bash|ksh|zsh)
        rc_script_ext=sh
        ;;
    tcsh|csh)
        rc_script_ext=csh
        ;;
    *)
        rc_script_ext=sh
        ;;
esac

cat <<EOF
[33m
===============================================================================
 INSTALLATION COMPLETE
===============================================================================
[0m[1m
Global profile scripts have been installed in:

/etc/profile.d/alces-clusterware.sh
/etc/profile.d/alces-clusterware.csh

Please login again, or manually run the following:

source /etc/profile.d/alces-clusterware.${rc_script_ext}

Afterwards, execute 'alces' for further information.
[0m
EOF
