#!/bin/bash
#==============================================================================
# Copyright (C) 2015-2017 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_get_usable_name() {
    local name suffix
    suffix=$(uuid -v4 | cut -f1 -d'-')
    name="$1-${suffix}"
    while naming_rr_exists --ignore-cname "${name}.${cw_NAMING_domain}"; do
        suffix=$(uuid -v4 | cut -f1 -d'-')
        name="$1-${suffix}"
    done
    echo "${name}"
}

_check_usable_name() {
    local name
    name="$1"
    if naming_rr_exists --ignore-cname "${name}.${cw_NAMING_domain}"; then
	return 1
    else
	return 0
    fi
}

_ensure_secret() {
    local secret
    if [ -z "${cw_NAMING_secret}" ]; then
        cw_NAMING_secret=$(uuid -v4)
        echo "cw_NAMING_secret=\"${cw_NAMING_secret}\"" >> ${cw_ROOT}/etc/naming.rc
    fi
}

_write_periodic_scripts() {
    # write periodic ping script
    cat <<'EOF' > "${cw_ROOT}"/var/lib/event-periodic/scripts/certificate-pinger
#!/bin/bash
################################################################################
##
## Alces Clusterware - Periodic executor
## Copyright (c) 2017 Alces Software Ltd
##
################################################################################
require naming
require network
require files
files_load_config access
name="${cw_ACCESS_fqdn%%.*}"
s="$(dd if=/dev/urandom bs=8 count=1 2>/dev/null | base64 | cut -c1-8)"
k="$(echo -n "${name}:${s}:${cw_NAMING_auth}" | md5sum | cut -f1 -d' ')"
if network_is_ec2; then
  meta="$(network_ec2_hashed_account)"
else
  meta="$(network_get_iface_mac $(network_get_first_iface))"
fi
if naming_ping_cert "$name" "$s" "$k" "$meta"; then
  echo "Ping for ${name} succeeded."
else
  echo "Ping for ${name} failed."
fi
for alt in ${cw_ACCESS_alts}; do
  k="$(echo -n "${alt}:${s}:${cw_NAMING_auth}" | md5sum | cut -f1 -d' ')"
  if naming_ping_cert "${alt}" "$s" "$k" "$meta"; then
    echo "Ping for ${alt} succeeded."
  else
    echo "Ping for ${alt} failed."
  fi
done
EOF
    chmod 755 "${cw_ROOT}"/var/lib/event-periodic/scripts/certificate-pinger
}

main() {
    local name basename ip is_local errlvl try_skip_suffix
    if [ "$1" == "--local" ]; then
        is_local=true
        shift
    fi
    if [ "$1" == "--try-skip-suffix" ]; then
	try_skip_suffix=true
	shift
    fi
    basename="${1:-flight}"
    sane_name="$(echo "${basename}" | tr "[A-Z]" "[a-z]" | sed -e 's/[^a-z0-9_]/-/g' -e 's/-[-]*/-/g' -e 's/-$//g')"
    shift
    if ! files_load_config --optional access; then
	if [ "${try_skip_suffix}" ]; then
	    if _check_usable_name "${basename}"; then
		name="${basename}"
	    else
		echo "specified name, ${basename}, is not available; falling back to suffixed name"
		name="$(_get_usable_name ${basename})"
	    fi
	else
            name="$(_get_usable_name ${basename})"
	fi
        echo "cw_ACCESS_fqdn=\"${name}.${cw_NAMING_domain}\"" >> "${cw_ROOT}"/etc/access.rc
        cat <<EOF > "${cw_ROOT}"/etc/meta.d/access.rc
: '
: SYNOPSIS: External access details
: HELP: Display information about the allocated hostname for accessing this cluster from the public internet.
: '
################################################################################
##
## Alces Clusterware - Metadata file
## Copyright (c) 2016 Alces Software Ltd
##
################################################################################
require files
files_load_config access
EOF
        echo "cw_META_access_fqdn_desc=\"Access host name\"" >> "${cw_ROOT}"/etc/meta.d/access.rc
        echo 'cw_META_access_fqdn="${cw_ACCESS_fqdn}"' >> "${cw_ROOT}"/etc/meta.d/access.rc
        echo "cw_META_access_hostname_desc=\"External cluster name\"" >> "${cw_ROOT}"/etc/meta.d/access.rc
        echo "cw_META_access_hostname=\"${name}\"" >> "${cw_ROOT}"/etc/meta.d/access.rc
        _ensure_secret
        ip="${2:-$(network_get_public_address)}"

        if [ "${is_local}" ]; then
            if ! naming_create_rr "${name}.${cw_NAMING_domain}" "${ip}"; then
                action_die "unable to create DNS entry for ${name} -> ${ip}"
            else
                # give an initial chance to propagate
                sleep 10
                while ! naming_rr_exists --ignore-cname "${name}.${cw_NAMING_domain}"; do
                    echo 'Waiting for DNS record to appear'
                    sleep 10
                done
            fi
        fi
    else
        name="${cw_ACCESS_fqdn}"
    fi
    if naming_cert_exists; then
        action_die "certificate already present"
    elif [ "${is_local}" ]; then
        if ! naming_issue_cert "${name}"; then
            action_die "unable to issue SSL cert for ${name}"
        fi
    else
        ip="${ip:-$(network_get_public_address)}"
        s="$(dd if=/dev/urandom bs=8 count=1 2>/dev/null | base64 | cut -c1-8)"
        k="$(echo -n "${name}:${s}:${cw_NAMING_auth}" | md5sum | cut -f1 -d' ')"
        if network_is_ec2; then
            meta="$(network_ec2_hashed_account)"
        else
            meta="$(network_get_iface_mac $(network_get_first_iface))"
        fi
        alts=()
        alt_names=()
        for a in "$@"; do
            alts+=("${name}.${a}")
            alt_names+=("${name}.${a%:*}")
        done
        if [ "${#alts}" -gt 0 ]; then
            echo "cw_ACCESS_alts=\"${alt_names[@]}\"" >> "${cw_ROOT}"/etc/access.rc
        fi
	naming_fetch_cert "${name}" "${ip}" "${s}" "${k}" "${meta}" "${alts[@]}"
	errlvl=$?
        if [ "$errlvl" == 0 ]; then
            _write_periodic_scripts
	    return
        elif [ "$errlvl" == 147 ]; then
	    # retry
	    if naming_fetch_cert "${name}" "${ip}" "${s}" "${k}" "${meta}" "${alts[@]}"; then
                _write_periodic_scripts
		return
	    fi
        fi
	echo "unable to fetch SSL cert for ${name}; falling back to self-signed cert"
	# issue a self-signed cert instead
	naming_issue_self_signed_cert "${name}" \
				      "Clusterware Instance Certificate" \
				      "${cw_ROOT}"/etc/ssl/cluster
    fi
}

setup

require action
require naming
require network
require files

main "$@"
