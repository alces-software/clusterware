#!/bin/bash
#==============================================================================
# Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.rc ]; then
            source "${a}"/clusterware/config.rc
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

main() {
    local data output errlvl
    files_load_config instance config/cluster
    if [ "${cw_INSTANCE_role}" == "master" ]; then
        if [ -x "${cw_FLIGHT_RECORDER_generator}" ]; then
            echo "flight-recorder: processing event: $*"
            data=$("${cw_FLIGHT_RECORDER_generator}" "$@")
            output=$(webapi_post ${cw_FLIGHT_RECORDER_url} \
                                 --mimetype ${cw_FLIGHT_RECORDER_mimetype:-application/x-www-form-urlencoded} \
                                 <<< "${data}" 2>&1)
            errlvl=$?
            if [ $errlvl -gt 0 ]; then
                echo "flight-recorder: event failed: $errlvl"
                echo "flight-recorder: data was: ${data}"
                echo "flight-recorder: output was: ${output}"
                return 1
            fi
        else
            echo "flight-recorder: could not execute data generator: ${cw_FLIGHT_RECORDER_generator}"
            return 1
        fi
    fi
}

setup

require action
require files
require webapi

if files_load_config --optional flight-recorder; then
    if [ "${cw_FLIGHT_RECORDER_enabled}" == "true" ]; then
        main "$@"
    fi
fi
