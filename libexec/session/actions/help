#!/bin/bash
#==============================================================================
# Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
require action

main() {
    action=$1
    shift

    case $action in
        help|list|info|start|kill|clean|wait|avail|enable|disable|update)
            help_for_${action}
            ;;
        ?*)
            echo "${cw_BINNAME}: no such topic: ${action}"
            echo ""
            general_help
            ;;
        *)
            general_help
            ;;
    esac
}

help_for_avail() {
    cat <<EOF
  SYNOPSIS:

    alces session avail

  DESCRIPTION:

    Display session types available for installation.  Installed
    session types that are available for use are marked with a '*'.

EOF
}

help_for_clean() {
    cat <<EOF
  SYNOPSIS:

    alces session clean [<session identity>]

  DESCRIPTION:

    Clean up a session that is no longer running.

    Use this command to remove files that remain after a session has
    been terminated abnormally.

    If no <session identity> is specified, all sessions that are no
    longer running will be cleaned.  A session identity can be found
    with the 'list' command.

    This command will have no effect on sessions that are currently
    running.

EOF
}

help_for_disable() {
    cat <<EOF
  SYNOPSIS:

    alces session disable <type>

  DESCRIPTION:

    Remove a previously installed session <type> and make it
    unavailable for use.

EOF
}

help_for_enable() {
    cat <<EOF
  SYNOPSIS:

    alces session enable [<repository>/]<type> [PARAMS...]

  DESCRIPTION:

    Install an available session <type> to make it available for
    use.

    Any supplied PARAMS will be passed on to the session type
    installation script (check session type documentation for
    information on what installation parameters a session type
    accepts).

    If you have multiple repositories available which contained
    similarly named session types, you may specify a <repository>.
    If no repository is specified, the 'base' repository is used
    by default.

    Using this command will execute installation instructions
    associated with the session type if any are present.

EOF
}

help_for_help() {
    cat <<EOF
  SYNOPSIS:

    alces session help [<command>]

  DESCRIPTION:

    Get help with session commands.  If no <command> is specified,
    show some general help.

EOF
}

help_for_info() {
    cat <<EOF
  SYNOPSIS:

    alces session info [OPTIONS] <session identity>

  DESCRIPTION:

    Display information about an existing session.

    Specify the target session by supplying <session identity>.  A
    session identity can be found with the 'list' command.

  OPTIONS:

    --vars
      Output Bash-compatible associative array variables rather than a
      human-friendly description.

EOF
}

help_for_kill() {
    cat <<EOF
  SYNOPSIS:

    alces session kill <session identity>

  DESCRIPTION:

    Terminate an existing session.

    Specify the target session by supplying <session identity>.  A
    session identity can be found with the 'list' command.

EOF
}

help_for_list() {
    cat <<EOF
  SYNOPSIS:

    alces session list [OPTIONS]

  DESCRIPTION:

    List currently active sessions.

    Active sessions are sessions which are starting, currently running
    or have finished but have not yet been cleaned up.

  OPTIONS:

    --url
      Show a vnc:// scheme URL for each session instead of the IP,
      display, port and password fields.

    --identities
      Emit session identities only, useful for looping over the list
      and executing other commands.

EOF
}

help_for_start() {
    cat <<EOF
  SYNOPSIS:

    alces session start [OPTIONS] <type> [PARAMS...]

  DESCRIPTION:

    Start a new session of <type>. Once started access information
    will be shown.

    Any supplied PARAMS will be passed on to the session execution
    script (check session type documentation for information on what
    runtime parameters a session type accepts).

    Available session types can by found with the 'avail' command.

  OPTIONS:

    --terse
      Once started, output session identity only.

    --runtime <minutes>
      Optionally specify the required execution time for the session
      in minutes.  If this is not specified the default session length
      configured for this system will apply.  If specified as '0' then
      the session will run up to the maximum runtime configured for
      this system (or forever if no maximum is configured).

EOF
}

help_for_update() {
    cat <<EOF
  SYNOPSIS:

    alces session update [<repository> <url>]

  DESCRIPTION:

    Initialize or update a session type repository.

    If a <repository> and <url> are specified, create or update the
    named <repository> from the specified remote git repository <url>.

    If no parameters are specified, initialize or update the 'base'
    repository from a default URL.

EOF
}

help_for_wait() {
    cat <<EOF
  SYNOPSIS:

    alces session wait <session identity>

  DESCRIPTION:

    Wait for the termination of an existing session.

    Specify the target session by supplying <session identity>.  A
    session identity can be found with the 'list' command.

EOF
}

general_help() {
    local binname
    binname="${cw_BINNAME% *}"
    cat <<EOF
  NAME:

    ${binname}

  DESCRIPTION:

    Manage interactive VNC sessions.

  COMMANDS:

EOF
printf "    %-22s  %s\n" "$binname help" "More help about this command."
printf "    %-22s  %s\n" "$binname list" "List running interactive VNC sessions."
printf "    %-22s  %s\n" "$binname info" "Show information about a running session."
printf "    %-22s  %s\n" "$binname start" "Start an interactive VNC session."
printf "    %-22s  %s\n" "$binname kill" "Terminate an interactive VNC session."
printf "    %-22s  %s\n" "$binname clean" "Clean inactive interactive VNC sessions."
printf "    %-22s  %s\n" "$binname wait" "Wait for completion of an interactive VNC session."
printf "    %-22s  %s\n" "$binname avail" "List installed/available sessions."
printf "    %-22s  %s\n" "$binname enable" "Enable a session from a repository."
printf "    %-22s  %s\n" "$binname disable" "Disable a session."
printf "    %-22s  %s\n" "$binname update" "Update session repository."
cat <<EOF

Please report bugs to support@alces-software.com
Alces Software home page: <http://alces-software.com>
EOF
}

main "$@"
