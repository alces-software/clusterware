#!/bin/bash
#==============================================================================
# Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
require action
require files
require network
require service
require vnc
require handler
require process

action_cleanup() {
    if [ "$_CLEANED" ]; then return; fi
    _CLEANED=true
    if [ "${_VNC_DISPLAY}" ]; then
        vnc_cleanup "${_VNC_DISPLAY}" "${_SESSIONDIR}"
    fi
    service_cleanup
    files_cleanup
}

_start_grabber() {
    local display log sessionid
    display=$1
    sessionid=$2

    log=${_SESSIONDIR}/grabber.log
    files_mark_tempfile "$log"

    PATH="${_XWDBIN}:$PATH" $_GRABBER $display $sessionid >$log 2>&1 &
    service_add 'grabber' $!
}

_start_timer() {
    local display runtime log
    display=$1
    runtime=$2

    log=${_SESSIONDIR}/timer.log
    files_mark_tempfile "$log"

    $_TIMER "${_SESSIONDIR}" "${display}" "${runtime}" >$log 2>&1 &
    service_add 'timer' $!
}

_start_websocket() {
    local host port websockify_log
    host="$1"
    port="$2"
    vncport="$3"

    websockify_log="$_SESSIONDIR/websockify.log"
    files_mark_tempfile "$websockify_log"

    $_WEBSOCKIFY $port localhost:$vncport > "${websockify_log}" 2>&1 &
    service_add 'websockify' $!
}

main() {
    if ! session_check_quota; then
        action_die "sorry, your session quota has been reached on this host (${cw_SESSION_quota})."
    fi
    local sessionscript password vnc_vars host_address terse params
    local sessionvars sessiontype runtime geometry sessiondirs dir
    local -A vnc

    #
    # Optional argument parsing.
    #
    if [ "$1" == "--terse" ]; then
        terse=true
        shift
    fi

    if [ "$1" == "--runtime" ]; then
        runtime=$2
        shift 2
    fi
    runtime="${runtime:-${cw_SESSION_default_timeout:-0}}"
    # ensure numericality
    runtime=$(($runtime+0))
    if [ "$runtime" == "0" ]; then
        runtime="${cw_SESSION_timeout:-0}"
    elif [ -n "${cw_SESSION_timeout}" -a "$runtime" -gt "${cw_SESSION_timeout:-0}" ]; then
        # enforce specified maximum
        runtime="${cw_SESSION_timeout}"
    fi

    if [ "$1" == "--geometry" ]; then
        geometry=$2
        shift 2
    fi
    # If no geometry is given as a parameter or in config, pass "" through to
    # the VNC server so it uses its default value.
    geometry="${geometry:-${cw_SESSION_geometry}}"
    if [[ -n "${geometry}" && ! "${geometry}" =~ ^[0-9]+x[0-9]+$ ]]; then
        action_die "bad value for geometry: ${geometry} (must be like \"1024x768\")"
    fi

    #
    # Determine session script to use.
    #
    sessionscript="$1"
    shift
    if [ "$1" ]; then
        have_params=true
    fi
    files_mktempdir "${_SESSIONDIR}"
    touch "${_SESSIONDIR}/starting.txt"
    files_mark_tempfile "${_SESSIONDIR}/starting.txt"

    if [ "$sessionscript" == "-" ]; then
        cat > "${_SESSIONDIR}/session.sh"
        sessiontype='custom (stdin)'
    elif [ -f "$sessionscript" ]; then
        cp "$sessionscript" "${_SESSIONDIR}/session.sh"
        sessiontype="custom ($sessionscript)"
    else
        IFS=: read -a sessiondirs <<< "${cw_SESSION_dir}:${CW_SESSIONPATH}"
        for dir in "${sessiondirs[@]}"; do
            if [ -f "${dir}/${sessionscript}/session.sh" ]; then
                cp "${dir}/${sessionscript}/session.sh" "${_SESSIONDIR}/session.sh"
                sessiontype="${sessionscript}"
                break
            fi
        done
        if [ -z "${sessiontype}" ]; then
            if [ "$sessionscript" ]; then
                action_die "unable to locate session script: $sessionscript"
            else
                for dir in "${sessiondirs[@]}"; do
                    shopt -s nullglob
                    for a in "${dir}"/*; do
                        sessionscripts="$sessionscripts, $(basename $a)"
                    done
                    shopt -u nullglob
                done
                sessionscripts="${sessionscripts:2}"
                action_die "no session script provided - specify path or specify one of: $sessionscripts"
            fi
        fi
    fi
    files_mark_tempfile "${_SESSIONDIR}/session.sh"

    #
    # Create wrapper script if needed to pass in extra parameters.
    #
    if [ "$1" ]; then
        # we have parameters, so need to pass them into the session script
        mv "${_SESSIONDIR}/session.sh" "${_SESSIONDIR}/session-runner.sh"
        chmod 755 ${_SESSIONDIR}/session-runner.sh
        files_mark_tempfile "${_SESSIONDIR}/session-runner.sh"
        params=()
        for a in "$@"; do
            params+="\"$a\""
        done
        cat <<EOF | tee -a /tmp/session.sh.$$ > "${_SESSIONDIR}/session.sh"
#!/bin/bash
exec ${_SESSIONDIR}/session-runner.sh ${params}
EOF
    fi

    #
    # Start session, logging/writing details.
    #
    password=$(vnc_create_password)
    vnc_session_start "${password}" "${geometry}" "${_SESSIONDIR}"

    if ! vnc_vars="$(vnc_read_vars "${_SESSIONDIR}")"; then
        action_die "VNC server could not be started, unable to locate configuration file."
    fi

    eval "$vnc_vars"
    if [ -z "${vnc[HOST]}" ]; then
        action_die "VNC server could not be started, unable to determine host."
    fi
    _VNC_DISPLAY="${vnc[DISPLAY]}"
    files_mark_tempfile "${vnc[LOG]}"
    files_mark_tempfile "${vnc[PIDFILE]}"

    host_address=$(network_get_public_address)
    access_address=$(network_get_mapped_address "${host_address}" table access)
    vnc[WEBSOCKET]=$(network_get_free_port 41361)
    _start_websocket "$host_address" "${vnc[WEBSOCKET]}" "$((5900+${_VNC_DISPLAY}))"

    if [ ! -f "${vnc[PIDFILE]}" ]; then
        action_die "VNC server did not start successfully, unable to locate process file."
    fi

    sessionvars=("${_SESSIONID}" "${host_address}" "${access_address}" "${vnc[DISPLAY]}" "${password}" "${vnc[WEBSOCKET]}" "${sessiontype}")
    vnc_write_detail_file "${sessionvars[@]}"
    vnc_write_vars_file "${sessionvars[@]}"
    if [ "$terse" ]; then
        echo "$_SESSIONID"
    else
        vnc_emit_details "${sessionvars[@]}"
    fi

    handler_run_hook session-start "$_SESSIONID"
    _start_grabber "${vnc[DISPLAY]}" "$_SESSIONID"

    if [ "${runtime}" -gt 0 ]; then
        _start_timer "${vnc[DISPLAY]}" "${runtime}"
    fi

    #
    # Clean up.
    #
    rm -f "${_SESSIONDIR}/starting.txt"
    {
        process_wait_for_pid $(cat "${vnc[PIDFILE]}")
        handler_run_hook session-end "$_SESSIONID"
        action_cleanup
    } &>/dev/null &
}

_GRABBER="${cw_ROOT}/libexec/session/share/grabber"
_TIMER="${cw_ROOT}/libexec/session/share/timer"
_WEBSOCKIFY="${cw_ROOT}/opt/websockify/websockify"
_XWDBIN="${cw_ROOT}/opt/xwd/bin"

# XXX cw!
action_check_progs "${cw_VNCSERVER}" "${cw_VNCPASSWD}" "${_WEBSOCKIFY}" "${_GRABBER}" "${_XWDBIN}/xwd" uuid

_SESSIONID="$(uuid)"
_SESSIONDIR="$(vnc_sessions_dir)/${_SESSIONID}"
_VNC_DISPLAY=""

if [ -f "${cw_ROOT}/etc/session.rc" ]; then
    . "${cw_ROOT}/etc/session.rc"
fi

main "$@"
