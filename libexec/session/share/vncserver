#!/usr/bin/env perl
#==============================================================================
# Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
#
#  Copyright (C) 2009-2010 D. R. Commander.  All Rights Reserved.
#  Copyright (C) 2005-2006 Sun Microsystems, Inc.  All Rights Reserved.
#  Copyright (C) 2002-2003 Constantin Kaplinsky.  All Rights Reserved.
#  Copyright (C) 2002-2005 RealVNC Ltd.
#  Copyright (C) 1999 AT&T Laboratories Cambridge.  All Rights Reserved.
#
#  This is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this software; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
#  USA.
#

#
# vncserver - wrapper script to start an X VNC server.
#

#
# First make sure we're operating in a sane environment.
#

$xauth = "xauth";

#
# Global variables.  You may want to configure some of these for your site.
#

$geometry = "1024x768";
#$depth = 16;
$xauthorityFile = "$ENV{XAUTHORITY}" || "$ENV{HOME}/.Xauthority";

chop($host = `uname -n`);

if (-d "/etc/X11/fontpath.d") {
    $fontPath = "catalogue:/etc/X11/fontpath.d";
}

@fontpaths = ('/usr/share/X11/fonts', '/usr/share/fonts', '/usr/share/fonts/X11/');
if (! -l "/usr/lib/X11") {push(@fontpaths, '/usr/lib/X11/fonts');}
if (! -l "/usr/X11") {push(@fontpaths, '/usr/X11/lib/X11/fonts');}
if (! -l "/usr/X11R6") {push(@fontpaths, '/usr/X11R6/lib/X11/fonts');}
push(@fontpaths, '/usr/share/fonts/default');

@fonttypes = ('misc', '75dpi', '100dpi', 'Speedo', 'Type1');

foreach $_fpath (@fontpaths) {
    foreach $_ftype (@fonttypes) {
        if (-f "$_fpath/$_ftype/fonts.dir") {
            if (! -l "$_fpath/$_ftype") {
                $defFontPath .= "$_fpath/$_ftype,";
            }
        }
    }
}

if ($defFontPath) {
    if (substr($defFontPath, -1, 1) == ',') {
        chop $defFontPath;
    }
}

if ($fontPath eq "") {
    $fontPath = $defFontPath;
}

# Check command line options

&ParseOptions("-geometry",1,"-depth",1,"-pixelformat",1,"-name",1,"-kill",0,
              "-help",0,"-h",0,"--help",0,"-fp",1,"-fg",0,"-autokill",0,"-vncpasswd",1,
              "-sessionscript",1,"-sessiondir",1,"-exedir",1);

&Usage() if ($opt{'-help'} || $opt{'-h'} || $opt{'--help'});

if ($opt{'-sessiondir'}) {
    $sessionDir = $opt{'-sessiondir'};
} else {
    &Usage();
}

&Kill() if ($opt{'-kill'});

if ($opt{'-vncpasswd'} eq "") {
    &Usage();
}

if ($opt{'-geometry'}) {
    $geometry = $opt{'-geometry'};
}
if ($opt{'-depth'}) {
    $depth = $opt{'-depth'};
    $pixelformat = "";
}
if ($opt{'-pixelformat'}) {
    $pixelformat = $opt{'-pixelformat'};
}
if ($opt{'-fp'}) {
    $fontPath = $opt{'-fp'};
    $fpArgSpecified = 1;
}
if ($opt{'-sessionscript'}) {
    $sessionScript = $opt{'-sessionscript'};
} else {
    &Usage();
}
if ($opt{'-exedir'}) {
    $exedir = "$opt{'-exedir'}/";
} else {
    $exedir = "/usr/bin/";
}

&SanityCheck();
&CheckGeometryAndDepth();

# Create the user's vnc directory if necessary.

if (!(-e $sessionDir)) {
    if (!mkdir($sessionDir,0755)) {
        die "$prog: Could not create $sessionDir.\n";
    }
}

# Find display number.

if ((@ARGV > 0) && ($ARGV[0] =~ /^:(\d+)$/)) {
    $displayNumber = $1;
    shift(@ARGV);
    if (!&CheckDisplayNumber($displayNumber)) {
        die "A VNC server is already running as :$displayNumber\n";
    }
} elsif ((@ARGV > 0) && ($ARGV[0] !~ /^-/) && ($ARGV[0] !~ /^\+/)) {
    &Usage();
} else {
    $displayNumber = &GetDisplayNumber();
}

$vncPort = 5900 + $displayNumber;

$sessionLog = "$sessionDir/session.log";
unlink($sessionLog);

# Make an X server cookie - use mcookie
$cookie = `/usr/bin/mcookie`;
open (XAUTH, "|xauth -f $xauthorityFile source -");
print XAUTH "add $host:$displayNumber . $cookie\n";
print XAUTH "add $host/unix:$displayNumber . $cookie\n";
close XAUTH;

if ($opt{'-name'}) {
    $desktopName = $opt{'-name'};
} else {
    $desktopName = "$host:$displayNumber ($ENV{USER})";
}

# Now start the X VNC Server

$cmd = $exedir."Xvnc :$displayNumber";
$cmd .= " -desktop " . &quotedString($desktopName);
$cmd .= " -auth $xauthorityFile";
$cmd .= " -geometry $geometry" if ($geometry);
$cmd .= " -depth $depth" if ($depth);
$cmd .= " -pixelformat $pixelformat" if ($pixelformat);
$cmd .= " -rfbwait 30000";
$cmd .= " -rfbauth $opt{'-vncpasswd'}";
$cmd .= " -rfbport $vncPort";
$cmd .= " -fp $fontPath" if ($fontPath);
$cmd .= " -pn";

foreach $arg (@ARGV) {
    $cmd .= " " . &quotedString($arg);
}
$cmd .= " >> " . &quotedString($sessionLog) . " 2>&1";

# Run $cmd and record the process ID.

$pidFile = "$sessionDir/vncserver.pid";
system("$cmd & echo \$! >$pidFile");

# Give Xvnc a chance to start up

sleep(3);
unless (kill 0, `cat $pidFile`) {
    warn "Could not start Xvnc.\n\n";
    open(LOG, "<$sessionLog");
    while (<LOG>) { print; }
    close(LOG);
    die "\n";
}

warn "\nNew '$desktopName' desktop is $host:$displayNumber\n\n";

# Ensure that the user's session starter script is executable.
if (!(-e $sessionScript)) {
    die "Unable to locate session script."
}
if (!(-x $sessionScript)) {
    warn "Making session script $sessionScript executable\n";
    chmod 0755, $sessionScript;
}

# Run the X session starter script.

warn "Starting applications specified in $sessionScript\n";
warn "Log file is $sessionLog\n\n";
print "{EVAL}vnc[HOST]=\"$host\"\n";
print "{EVAL}vnc[DISPLAY]=\"$displayNumber\"\n";
print "{EVAL}vnc[LOG]=\"$sessionLog\"\n";
print "{EVAL}vnc[PIDFILE]=\"$pidFile\"\n";

# If the unix domain socket exists then use that (DISPLAY=:n) otherwise use
# TCP (DISPLAY=host:n)

if (-e "/tmp/.X11-unix/X$displayNumber" ||
    -e "/usr/spool/sockets/X11/$displayNumber")
{
    $ENV{DISPLAY}= ":$displayNumber";
} else {
    $ENV{DISPLAY}= "$host:$displayNumber";
}
$ENV{VNCDESKTOP}= $desktopName;

if ($opt{'-fg'}) {
    my @args = ("/bin/bash","-c","$sessionScript >> " . &quotedString($sessionLog) . " 2>&1");
    system(@args);
    if (kill 0, `cat $pidFile`) {
        $opt{'-kill'} = ':'.$displayNumber;
        &Kill();
    }
} else {
    if ($opt{'-autokill'}) {
        my @args = ("/bin/bash","-c","(/bin/bash $sessionScript; $0 -sessiondir $sessionDir -kill) >> "
                    . &quotedString($sessionLog) . " 2>&1 &");
        system(@args);
    } else {
        my @args = ("/bin/bash","-c","$sessionScript >> " . &quotedString($sessionLog) . " 2>&1 &");
        system(@args);
    }
}

exit;


###############################################################################
#
# CheckGeometryAndDepth simply makes sure that the geometry and depth values
# are sensible.
#

sub CheckGeometryAndDepth
{
    if ($geometry =~ /^(\d+)x(\d+)$/) {
        $width = $1; $height = $2;

        if (($width<1) || ($height<1)) {
            die "$prog: geometry $geometry is invalid\n";
        }

        while (($width % 4)!=0) {
            $width = $width + 1;
        }

        while (($height % 2)!=0) {
            $height = $height + 1;
        }

        $geometry = "${width}x$height";
    } else {
        die "$prog: geometry $geometry is invalid\n";
    }

    if ($depth && (($depth < 8) || ($depth > 32))) {
        die "Depth must be between 8 and 32\n";
    }
}


#
# GetDisplayNumber gets the lowest available display number.  A display number
# n is taken if something is listening on the VNC server port (5900+n) or the
# X server port (6000+n).
#

sub GetDisplayNumber
{
    foreach $n (1..99) {
        if (&CheckDisplayNumber($n)) {
            return $n+0; # Bruce Mah's workaround for bug in perl 5.005_02
        }
    }

    die "$prog: no free display number on $host.\n";
}


#
# CheckDisplayNumber checks if the given display number is available.  A
# display number n is taken if something is listening on the VNC server port
# (5900+n) or the X server port (6000+n).
#

sub CheckDisplayNumber
{
    local ($n) = @_;

    socket(S, $AF_INET, $SOCK_STREAM, 0) || die "$prog: socket failed: $!\n";
    eval 'setsockopt(S, &SOL_SOCKET, &SO_REUSEADDR, pack("l", 1))';
    if (!bind(S, pack('S n x12', $AF_INET, 6000 + $n))) {
        close(S);
        return 0;
    }
    close(S);

    socket(S, $AF_INET, $SOCK_STREAM, 0) || die "$prog: socket failed: $!\n";
    eval 'setsockopt(S, &SOL_SOCKET, &SO_REUSEADDR, pack("l", 1))';
    if (!bind(S, pack('S n x12', $AF_INET, 5900 + $n))) {
        close(S);
        return 0;
    }
    close(S);

    if (-e "/tmp/.X$n-lock") {
        warn "\nWarning: $host:$n is taken because of /tmp/.X$n-lock\n";
        warn "Remove this file if there is no X server $host:$n\n";
        return 0;
    }

    if (-e "/tmp/.X11-unix/X$n") {
        warn "\nWarning: $host:$n is taken because of /tmp/.X11-unix/X$n\n";
        warn "Remove this file if there is no X server $host:$n\n";
        return 0;
    }

    if (-e "/usr/spool/sockets/X11/$n") {
        warn("\nWarning: $host:$n is taken because of ".
             "/usr/spool/sockets/X11/$n\n");
        warn "Remove this file if there is no X server $host:$n\n";
        return 0;
    }

    return 1;
}

#
# quotedString returns a string which yields the original string when parsed
# by a shell.
#

sub quotedString
{
    local ($in) = @_;

    $in =~ s/\'/\'\"\'\"\'/g;

    return "'$in'";
}


#
# Usage
#

sub Usage
{
    die("\nusage: $prog [:<number>] [-name <desktop-name>] [-depth <depth>]\n".
        "                 [-geometry <width>x<height>]\n".
        "                 [-pixelformat rgbNNN|bgrNNN]\n".
        "                 [-fp <font-path>]\n".
        "                 [-fg]\n".
        "                 [-autokill]\n".
        "                 [-exedir <path to directory containing VNC executables>]\n".
        "                 -sessiondir <path for temporary session files>\n".
        "                 -sessionscript <path for script to run within session>\n".
        "                 -vncpasswd <path for VNC formatted password file>\n".
        "                 <Xvnc-options>...\n\n".
        "       $prog -kill\n".
        "             -sessiondir <path containing temporary session files>\n\n");
}


#
# Kill
#

sub Kill
{
    $pidFile = "$sessionDir/vncserver.pid";

    if (! -r $pidFile) {
        die "\nCan't find file $pidFile\n".
            "You'll have to kill the Xvnc process manually\n\n";
    }

    $SIG{'HUP'} = 'IGNORE';
    chop($pid = `cat $pidFile`);
    warn "Killing Xvnc process ID $pid\n";

    if (kill 0, $pid) {
        system("kill $pid");
        sleep(1);
        if (kill 0, $pid) {
            print "Xvnc seems to be deadlocked.  Kill the process manually and then re-run\n";
            print "    ".$0." -kill ".$opt{'-kill'}."\n";
            print "to clean up the socket files.\n";
            exit
        }

    } else {
        warn "Xvnc process ID $pid already killed\n";
        $opt{'-kill'} =~ s/://;

        if (-e "/tmp/.X11-unix/X$opt{'-kill'}") {
            print "Xvnc did not appear to shut down cleanly.";
            print " Removing /tmp/.X11-unix/X$opt{'-kill'}\n";
            unlink "/tmp/.X11-unix/X$opt{'-kill'}";
        }
        if (-e "/tmp/.X$opt{'-kill'}-lock") {
            print "Xvnc did not appear to shut down cleanly.";
            print " Removing /tmp/.X$opt{'-kill'}-lock\n";
            unlink "/tmp/.X$opt{'-kill'}-lock";
        }
    }

    unlink $pidFile;
    exit;
}


#
# ParseOptions takes a list of possible options and a boolean indicating
# whether the option has a value following, and sets up an associative array
# %opt of the values of the options given on the command line. It removes all
# the arguments it uses from @ARGV and returns them in @optArgs.
#

sub ParseOptions
{
    local (@optval) = @_;
    local ($opt, @opts, %valFollows, @newargs);

    while (@optval) {
        $opt = shift(@optval);
        push(@opts,$opt);
        $valFollows{$opt} = shift(@optval);
    }

    @optArgs = ();
    %opt = ();

    arg: while (defined($arg = shift(@ARGV))) {
        foreach $opt (@opts) {
            if ($arg eq $opt) {
                push(@optArgs, $arg);
                if ($valFollows{$opt}) {
                    if (@ARGV == 0) {
                        &Usage();
                    }
                    $opt{$opt} = shift(@ARGV);
                    push(@optArgs, $opt{$opt});
                } else {
                    $opt{$opt} = 1;
                }
                next arg;
            }
        }
        push(@newargs,$arg);
    }

    @ARGV = @newargs;
}


#
# Routine to make sure we're operating in a sane environment.
#

sub SanityCheck
{
    local ($cmd);

    #
    # Get the program name
    #

    ($prog) = ($0 =~ m|([^/]+)$|);

    #
    # Check we have all the commands we'll need on the path.
    #

 cmd:
    if (-x "/usr/X11R6/bin/xauth") {
        $xauth = "/usr/X11R6/bin/xauth";
    }
    else {
      cmd1:
        foreach $cmd ("xauth") {
            for (split(/:/,$ENV{PATH})) {
                if (-x "$_/$cmd") {
                    next cmd1;
                }
            }
            die "$prog: couldn't find \"$cmd\" on your PATH.\n";
        }
    }

    if($exedir eq "") {
      cmd2:
        foreach $cmd ("Xvnc") {
            for (split(/:/,$ENV{PATH})) {
                if (-x "$_/$cmd") {
                    next cmd2;
                }
            }
            die "$prog: couldn't find \"$cmd\" on your PATH.\n";
        }
    }
    else {
      cmd3:
        foreach $cmd ($exedir."Xvnc") {
            for (split(/:/,$ENV{PATH})) {
                if (-x "$cmd") {
                    next cmd3;
                }
            }
            die "$prog: couldn't find \"$cmd\".\n";
        }
    }

    #
    # Check the HOME environment variable is set
    #

    if (!defined($ENV{HOME})) {
        die "$prog: The HOME environment variable is not set.\n";
    }

    #
    # Find socket constants. 'use Socket' is a perl5-ism, so we wrap it in an
    # eval, and if it fails we try 'require "sys/socket.ph"'.  If this fails,
    # we just guess at the values.  If you find perl moaning here, just
    # hard-code the values of AF_INET and SOCK_STREAM.  You can find these out
    # for your platform by looking in /usr/include/sys/socket.h and related
    # files.
    #

    chop($os = `uname`);
    chop($osrev = `uname -r`);

    eval 'use Socket';
    if ($@) {
        eval 'require "sys/socket.ph"';
        if ($@) {
            if (($os eq "SunOS") && ($osrev !~ /^4/)) {
                $AF_INET = 2;
                $SOCK_STREAM = 2;
            } else {
                $AF_INET = 2;
                $SOCK_STREAM = 1;
            }
        } else {
            $AF_INET = &AF_INET;
            $SOCK_STREAM = &SOCK_STREAM;
        }
    } else {
        $AF_INET = &AF_INET;
        $SOCK_STREAM = &SOCK_STREAM;
    }
}
