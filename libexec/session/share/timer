#!/bin/bash
#==============================================================================
# Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_warning_message() {
    local stage runtime remain messagevar
    runtime=$1
    remain=$2
    stage=${3:-primary}
    messagevar="cw_SESSION_warn_${stage}_message"
    if [ "${!messagevar}" ]; then
        eval "echo \"$(echo -e "${!messagevar}")\""
    else
        cat <<EOF
WARNING!

This session will reach its maximum permitted runtime (${runtime} minutes)
and be automatically terminated in ${remain} minute(s).

Please complete or save your work as soon as possible.
EOF
    fi
}

_timeout_message() {
    local runtime
    runtime=$1
    if [ "${cw_SESSION_timeout_message}" ]; then
        eval "echo \"$(echo -e "${cw_SESSION_timeout_message}")\""
    else
        cat <<EOF
Your session has reached its maximum permitted runtime (${runtime} minutes)
and will now be automatically terminated.
EOF
    fi
}

_show_message() {
    local display message timeout
    display="$1"
    message="$2"
    echo "Displaying warning to user."
    xmessage -display ":${display}" -center "${message}" \
        -buttons "OK" -default "OK" &>/dev/null </dev/null &
}

main() {
    local sessiondir display primary_mins primary_secs secondary_mins secondary_secs
    local timeout_mins timeout_secs tmr

    sessiondir="$1"
    display="$2"
    timeout_mins="${3:-${cw_SESSION_timeout:-720}}"
    primary_mins="${cw_SESSION_warn_primary_time:-30}"
    secondary_mins="${cw_SESSION_warn_secondary_time:-0}"
    timeout_secs=$((${timeout_mins}*60))
    primary_secs=$((${timeout_secs}-${primary_mins}*60))
    if [ "$primary_secs" -lt "0" ]; then
        # if the calculated warning time is before the beginning, then
        # we'll use a fixed 5 minute period before the end of the
        # session for the warning.  If the session is less than 5
        # minutes long, then we'll use a 1 minute period before the
        # end of the session.
        if [ "$timeout_mins" -le "5" ]; then
            primary_secs=$((${timeout_secs}-60))
        else
            primary_secs=$((${timeout_secs}-300))
        fi
    fi
    if [ "${secondary_mins}" -gt "0" ]; then
        secondary_secs=$((${timeout_secs}-${secondary_mins}*60))
    else
        secondary_secs=0
    fi

    echo "Managing session timeouts (timeout: ${timeout_mins} [${timeout_secs}], warn after: ${primary_mins} [${primary_secs}], final warn after: ${secondary_mins} [${secondary_secs}]) for session: ${sessiondir}"

    tmr=0
    while [ "$tmr" -lt "$timeout_secs" ]; do
        sleep 1 &>/dev/null </dev/null &
        wait $!
        tmr=$(($tmr+1))
        if [ "$tmr" == "${primary_secs}" ]; then
            _show_message "${display}" \
                "$(_warning_message $timeout_mins $((${timeout_mins}-${tmr}/60)) primary)"
        elif [ "$tmr" == "${secondary_secs}" ]; then
            _show_message "${display}" \
                "$(_warning_message $timeout_mins $((${timeout_mins}-${tmr}/60)) secondary)"
        fi
    done

    echo "Informing user of impending termination."
    _show_message "${display}" "$(_timeout_message ${timeout_mins})"
    sleep "${cw_SESSION_termination_grace:-30}" &>/dev/null </dev/null &
    wait $!

    echo "Terminating session: ${sessiondir}"
    vnc_kill_server "${sessiondir}"
}

setup
require vnc

if [ -f "${cw_ROOT}/etc/session.rc" ]; then
    . "${cw_ROOT}/etc/session.rc"
fi

main "$@"
