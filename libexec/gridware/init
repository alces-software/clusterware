#!/bin/bash
#==============================================================================
# Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_detect_depot() {
    local name
    name="$1"
    if [ -L "${cw_GRIDWARE_root}"/${name} ]; then
        readlink "${cw_GRIDWARE_root}"/${name}
    else
        echo "${cw_GRIDWARE_root}/depots/$(uuid -v4 | cut -f1 -d'-')"
    fi
}

_link_depot() {
    local depot name
    depot="$1"
    name="$2"
    if ! _depot_exists "${name}"; then
        ln -snf "${depot}" "${cw_GRIDWARE_root}/${name}"
    fi
}

_depot_exists() {
    [ -d "${cw_GRIDWARE_root}/${name}" ]
}


_create_default_depot() {
    local name
    name="${cw_GRIDWARE_default_depot:-local}"
    _link_depot "$(_detect_depot "${name}")" "${name}"
}

_create_gridware_configuration() {
    cat <<EOF > "${cw_GRIDWARE_root}"/etc/gridware.yml
################################################################################
##
## Alces Clusterware - Gridware packager configuration
## Copyright (c) 2012-2016 Alces Software Ltd
##
################################################################################
---
:log_root: /var/log/gridware
:repo_paths:
 - ${cw_ROOT}/var/lib/gridware/repos/main
# - ${cw_ROOT}/var/lib/gridware/repos/volatile
# - ${cw_GRIDWARE_root}/etc/repos/local
:depot_repo_paths:
 - ${cw_ROOT}/var/lib/gridware/depots/official
# - ${cw_GRIDWARE_root}/etc/depots/local
:depotroot: ${cw_GRIDWARE_root}
:default_depot: ${cw_GRIDWARE_default_depot:-local}
:archives_dir: /var/cache/gridware/archives
:buildroot: /var/cache/gridware/src
:fallback_package_url: https://s3-eu-west-1.amazonaws.com/packages.alces-software.com/gridware
:default_binary_url: https://s3-eu-west-1.amazonaws.com/packages.alces-software.com/gridware/%24dist
:fetch_timeout: 10
:prefer_binary: ${cw_GRIDWARE_prefer_binary:-false}
EOF
}

_update_modulespath() {
    local name
    name="$1"
    if ! grep -q '${cw_GRIDWARE_root}/${name}/\$cw_DIST/etc/modules' "${cw_ROOT}"/etc/gridware/global/modulespath; then
        sed -e "/^#=Alces Gridware Depots/a ${cw_GRIDWARE_root}/${name}/\$cw_DIST/etc/modules" \
            -i "${cw_ROOT}"/etc/gridware/global/modulespath
    fi
}

_initialize_depot() {
    local depot name
    depot="$1"
    name="$2"

    mkdir -p "${depot}/${cw_DIST}/pkg" "${depot}/${cw_DIST}/etc"
    cp -R "${cw_ROOT}/etc/gridware/depotskel"/* "${depot}"/${cw_DIST}/etc
    export HOME=${HOME:-$(eval echo "~$(whoami)")}

    cat <<RUBY | ruby_run
ENV['BUNDLE_GEMFILE'] ||= "${cw_ROOT}/lib/ruby/Gemfile"
\$: << "${cw_ROOT}/lib/ruby/lib"

require 'rubygems'
require 'bundler'
Bundler.setup(:default)

require 'alces/packager/package'

system_gcc_opts = {
  type: 'compilers',
  name: 'gcc',
  version: \`/usr/bin/gcc -dumpversion\`.chomp,
  default: true,
  path: 'compilers/gcc/system'
}

DataMapper.repository(:'${name}') do
  Alces::Packager::Package.create!(system_gcc_opts)
end
RUBY

    chmod -R g+rw "${depot}"
    find "${depot}" -type d -exec chmod 2775 {} \;
    chgrp -R gridware "${depot}"
}

main() {
    local depot name
    cw_GRIDWARE_root="${1:-${cw_GRIDWARE_root}}"
    shift
    
    while [ "$1" ]; do
        cw_GRIDWARE_depots="${cw_GRIDWARE_depots} $1"
        shift
    done
    
    mkdir -p "${cw_GRIDWARE_root}"
    _create_default_depot

    if [ ! -f "${cw_GRIDWARE_root}"/etc/gridware.yml ]; then
        mkdir -p "${cw_GRIDWARE_root}"/etc
        _create_gridware_configuration
    fi

    for name in ${cw_GRIDWARE_default_depot:-local} ${cw_GRIDWARE_depots}; do
        depot="$(_detect_depot "${name}")"

        title "Performing initial configuration for '${name}' depot"
        if _depot_exists "${name}"; then
            doing 'Detect'
        else
            doing "Configure"
            _link_depot "${depot}" "${name}"
            _update_modulespath "${name}"
        fi
        say_done $?

        title "Setting up depot structure for '${cw_DIST}' in '${name}'"
        if [ -d "${depot}/${cw_DIST}/pkg" ]; then
            doing 'Detect'
        else
            doing "Configure"
            _initialize_depot "${depot}" "${name}"
        fi
        say_done $?
    done

    title "Setting up local package repository"
    if [ -d "${cw_GRIDWARE_root}/etc/repos" ]; then
        doing 'Detect'
    else
        doing 'Configure'
        mkdir -p "${cw_GRIDWARE_root}/etc/repos"
        cp -R "${cw_ROOT}/etc/gridware/reposkel" "${cw_GRIDWARE_root}/etc/repos/local"
        chmod -R g+rw "${cw_GRIDWARE_root}"/etc
        find "${cw_GRIDWARE_root}"/etc -type d -exec chmod 2775 {} \;
        chgrp -R gridware "${cw_GRIDWARE_root}"/etc
        chgrp gridware "${cw_GRIDWARE_root}" "${cw_GRIDWARE_root}"/depots
        chmod g+rws "${cw_GRIDWARE_root}" "${cw_GRIDWARE_root}"/depots
    fi
    say_done $?

    title "Setting up local depot repository"
    if [ -d "${cw_GRIDWARE_root}/etc/depots" ]; then
        doing 'Detect'
    else
        doing 'Configure'
        mkdir -p "${cw_GRIDWARE_root}/etc/depots"
        cp -R "${cw_ROOT}/etc/gridware/reposkel.depots" "${cw_GRIDWARE_root}/etc/depots/local"
        chmod -R g+rw "${cw_GRIDWARE_root}"/etc/depots
        find "${cw_GRIDWARE_root}"/etc/depots -type d -exec chmod 2775 {} \;
        chgrp -R gridware "${cw_GRIDWARE_root}"/etc/depots
    fi
    say_done $?
}

setup

require distro
require ui
require files
require ruby

files_load_config gridware

main "$@"
